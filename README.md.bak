# 반도체 공정 이상치 탐지 웹 애플리케이션 (MOMENT 모델 기반)

이 프로젝트는 MOMENT 시계열 파운데이션 모델을 활용한 반도체 공정 데이터 이상치 탐지 웹 애플리케이션입니다. Starlette 및 Uvicorn을 기반으로 하여 비동기 처리를 통해 효율적인 성능을 제공합니다.

## 주요 기능

- MOMENT 시계열 파운데이션 모델을 활용한 고성능 이상치 탐지
- 반도체 공정 데이터에서 이상치 자동 탐지 및 분석
- 다양한 특성(features) 기반 분석 및 시각화
- 그룹별(장비, 배치 등) 이상치 분석
- 시각적 분석 도구 (시계열, 분포, 상관관계, 이상치 점수)
- MOMENT와 IsolationForest 모델 성능 비교
- 비동기 처리를 통한 빠른 응답 시간

## 기술 스택

- **백엔드**: Starlette, Uvicorn (비동기 웹 프레임워크)
- **데이터 처리**: Pandas, NumPy
- **딥러닝/ML**: MOMENT 시계열 파운데이션 모델, PyTorch, scikit-learn
- **시각화**: Plotly
- **프론트엔드**: HTML, CSS, JavaScript, Bootstrap 5
- **패키지 관리**: UV (빠르고 신뢰할 수 있는 Python 패키지 인스톨러)

## MOMENT 시계열 파운데이션 모델 소개

MOMENT(Multimodal Open Foundation Models for Time Series)는 시계열 데이터를 위한 강력한 파운데이션 모델입니다. AutonLab/MOMENT-1-large 모델을 활용하여 시계열 데이터의 복잡한 패턴을 학습하고 이상치를 탐지합니다.

### MOMENT 모델의 주요 특징:

1. **다양한 시계열 작업 지원**: 이상치 탐지, 분류, 예측, 결측치 임퓨테이션 등 다양한 시계열 관련 작업을 단일 모델로 처리할 수 있습니다.

2. **Transfer Learning**: 사전 학습된 모델을 통해 적은 데이터로도 높은 성능을 발휘합니다.

3. **시계열 특화 아키텍처**: 시계열 데이터의 특성에 맞게 설계된 아키텍처로, 시간적 의존성과 다양한 패턴을 효과적으로 학습합니다.

4. **재구성(Reconstruction) 기반 이상치 탐지**: 정상 패턴을 학습하고 재구성 오류를 통해 이상치를 효과적으로 탐지합니다.

5. **다중 모달 지원**: 다양한 유형과 도메인의 시계열 데이터에 대한 일반화된 성능을 제공합니다.

### 이 애플리케이션에서의 MOMENT 모델 사용:

- **재구성 오류 기반 이상치 탐지**: 모델이 정상 패턴을 학습하고, 재구성하기 어려운 패턴을 이상치로 판단합니다.
- **실시간 처리**: 비동기 처리를 통해 대규모 시계열 데이터도 효율적으로 분석합니다.
- **대체 모델 지원**: MOMENT 모델을 사용할 수 없는 환경에서는 자동으로 IsolationForest로 전환됩니다.
- **성능 비교**: MOMENT와 IsolationForest의 성능을 직접 비교할 수 있는 기능을 제공합니다.

## 환경 설정

### Python 3.10 이상 설치

#### 1. Ubuntu/Debian 시스템에 직접 설치

```bash
# 패키지 관리자 업데이트
sudo apt-get update

# Python 3.11 및 관련 패키지 설치
sudo apt-get install -y python3.11 python3.11-venv python3.11-dev
```

#### 2. pyenv를 사용한 설치 (여러 버전 관리 가능)

```bash
# pyenv 설치 (macOS)
brew install pyenv

# pyenv 설치 (Linux)
curl https://pyenv.run | bash

# pyenv PATH 설정 (.bashrc 또는 .zshrc에 추가)
echo 'export PYENV_ROOT="$HOME/.pyenv"' >> ~/.bashrc
echo 'command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"' >> ~/.bashrc
echo 'eval "$(pyenv init -)"' >> ~/.bashrc

# 쉘 재시작
source ~/.bashrc

# Python 3.11 설치
pyenv install 3.11.7

# 전역 또는 프로젝트에 Python 3.11 설정
pyenv global 3.11.7  # 전역 설정
# 또는
cd /path/to/project
pyenv local 3.11.7   # 프로젝트별 설정
```

#### 3. Windows에 설치

Windows에서는 [Python 공식 웹사이트](https://www.python.org/downloads/)에서 Python 3.11 설치 프로그램을 다운로드하여 설치할 수 있습니다.

### UV 패키지 관리 도구 설치

UV는 Rust로 작성된 빠르고 신뢰할 수 있는 Python 패키지 인스톨러 및 환경 관리 도구입니다.

```bash
# UV 설치
curl -sSf https://install.ultramarine.tools | sh

# 또는 pip로 설치
pip install uv

# PATH에 추가 (필요한 경우)
export PATH="$HOME/.local/bin:$PATH"
```

### 가상환경 생성 및 패키지 설치

```bash
# 프로젝트 디렉토리로 이동
cd anomaly_detection_app

# UV로 가상환경 생성
uv venv

# 가상환경 활성화
source .venv/bin/activate  # Linux/macOS
# 또는
.venv\Scripts\activate     # Windows

# 의존성 패키지 설치
uv pip install -r requirements.txt
```

### 간편 설정 스크립트 사용

이 프로젝트는 환경 설정을 자동화하는 스크립트를 제공합니다:

```bash
# Linux/macOS
chmod +x setup.sh
./setup.sh

# Windows
setup.bat
```

### Docker를 사용한 설정

Docker를 사용하여 애플리케이션을 실행할 수도 있습니다:

```bash
# Docker 이미지 빌드
docker build -t anomaly-detection-app .

# Docker 컨테이너 실행
docker run -p 5000:5000 anomaly-detection-app
```

또는 Docker Compose를 사용하여 더 간편하게 실행:

```bash
# Docker Compose로 실행
docker-compose up -d

# 로그 확인
docker-compose logs -f
```

#### Docker 환경설정 세부사항

1. **GPU 지원 설정**:
   Docker 컨테이너에서 GPU를 사용하려면 `docker-compose.yml` 파일에서 관련 주석을 해제하세요:
   ```yaml
   deploy:
     resources:
       reservations:
         devices:
           - driver: nvidia
             count: 1
             capabilities: [gpu]
   ```
   이 기능을 사용하려면 [NVIDIA Container Toolkit](https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/install-guide.html)이 호스트 시스템에 설치되어 있어야 합니다.

2. **볼륨 마운트**:
   기본적으로 `./data` 디렉토리가 컨테이너의 `/app/data`로 마운트됩니다. 데이터 파일을 유지하려면 이 볼륨을 사용하세요.

3. **환경 변수**:
   - `DEVICE`: MOMENT 모델 실행 장치 설정 (`cpu` 또는 `cuda`)
   - `PYTHONUNBUFFERED`: 로그 출력 설정

4. **사용자 정의 이미지 빌드 및 배포**:
   ```bash
   # 사용자 정의 태그로 이미지 빌드 
   docker build -t your-registry/anomaly-detection:version .
   
   # 레지스트리에 이미지 푸시
   docker push your-registry/anomaly-detection:version
   ```

5. **컨테이너 리소스 제한**:
   프로덕션 환경에서는 리소스 제한을 설정하는 것이 좋습니다:
   ```yaml
   deploy:
     resources:
       limits:
         cpus: '2'
         memory: 4G
   ```

### Kubernetes 배포

애플리케이션을 Kubernetes 클러스터에 배포할 수 있습니다. 이 프로젝트는 k8s 디렉토리에 필요한 배포 파일을 포함하고 있습니다.

```bash
# Kubernetes 배포 실행
kubectl apply -f k8s/deploy-svc.yaml

# 배포 상태 확인
kubectl get all -n semicon-anomaly

# 로그 확인
kubectl logs -f deployment/semicon-anomaly -n semicon-anomaly
```

#### Kubernetes 배포 세부사항

1. **리소스 설정**:
   - CPU와 메모리 요청 및 제한이 설정되어 있습니다. MOMENT 모델은 리소스 사용량이 높을 수 있으므로 필요에 따라 조정하세요.
   - GPU 지원이 필요한 경우 배포 파일에 GPU 리소스 요청을 추가해야 합니다.

2. **구성 옵션**:
   - ConfigMap을 통해 환경 변수를 설정할 수 있습니다.
   - `DEVICE` 환경 변수를 'cpu' 또는 'cuda'로 설정하여 모델 실행 장치를 지정할 수 있습니다.

3. **영구 스토리지**:
   - PersistentVolumeClaim을 사용하여 데이터 디렉토리에 대한 영구 스토리지를 제공합니다.
   - 이를 통해 Pod가 재시작되어도 생성된 데이터가 유지됩니다.

4. **오토스케일링**:
   - HorizontalPodAutoscaler가 설정되어 있어 CPU 사용량에 따라 자동으로 Pod를 스케일링합니다.
   - 부하가 증가하면 최대 5개의 복제본까지 자동 확장됩니다.

5. **상태 확인**:
   - Readiness 및 Liveness 프로브가 설정되어 있어 애플리케이션의 상태를 모니터링합니다.
   - 애플리케이션이 응답하지 않으면 자동으로 재시작됩니다.

## 개발 및 배포 가이드

이 프로젝트는 다양한 개발 및 배포 방식을 지원합니다. 자신의 요구사항과 환경에 맞는 방법을 선택하세요.

### 1. 로컬 개발 환경 (Python 및 UV 사용)

로컬 개발 환경은 코드를 수정하고 즉시 변경사항을 확인하는 데 가장 효율적입니다.

```bash
# 1. 설정 스크립트 실행
## Linux/macOS
chmod +x setup.sh
./setup.sh

## Windows
setup.bat

# 2. 가상환경 활성화
## Linux/macOS
source .venv/bin/activate

## Windows
.venv\Scripts\activate

# 3. 애플리케이션 실행
python app.py
# 또는 간편 실행 스크립트 사용
## Linux/macOS
./run_app.sh
## Windows
run_app.bat
```

**장점**:
- 코드 변경 후 즉시 확인 가능
- 직접적인 디버깅 용이
- 전체 배포 파이프라인 없이 테스트 가능

### 2. Docker 컨테이너 개발/테스트

Docker를 사용하면 환경 구성 문제 없이 어디서나 동일한 환경에서 애플리케이션을 실행할 수 있습니다.

#### 2.1 기본 Docker 빌드 및 실행

```bash
# 이미지 빌드
docker build -t anomaly-detection-app:local .

# 컨테이너 실행
docker run -p 5000:5000 -v "$(pwd)/data:/app/data" --name anomaly-app anomaly-detection-app:local
```

#### 2.2 최적화된 멀티스테이지 빌드 사용

```bash
# 멀티스테이지 빌드 (최적화된 이미지 크기)
docker build -t anomaly-detection-app:optimized -f Dockerfile.multistage .

# 컨테이너 실행
docker run -p 5000:5000 -v "$(pwd)/data:/app/data" --name anomaly-app anomaly-detection-app:optimized
```

#### 2.3 GPU 지원 빌드 (옵션)

```bash
# GPU 지원 빌드 (Dockerfile.gpu 생성 필요)
docker build -t anomaly-detection-app:gpu -f Dockerfile.gpu .

# GPU 지원으로 컨테이너 실행
docker run --gpus all -p 5000:5000 -v "$(pwd)/data:/app/data" --name anomaly-app anomaly-detection-app:gpu
```

#### 2.4 Docker Compose 사용

```bash
# Docker Compose로 실행
docker-compose up

# 백그라운드에서 실행
docker-compose up -d

# 로그 확인
docker-compose logs -f
```

**장점**:
- 환경 독립적 실행
- 운영 환경과 동일한 환경에서 테스트 가능
- 다양한 시스템에서 일관된 동작 보장

### 3. Kubernetes 배포

Kubernetes를 사용하면 프로덕션 환경에서 확장성, 고가용성, 복원력을 확보할 수 있습니다.

#### 3.1 Kubernetes 배포 준비

```bash
# 1. 레지스트리에 이미지 푸시 (얘시)
docker build -t your-registry/anomaly-detection-app:latest .
docker push your-registry/anomaly-detection-app:latest

# 2. k8s/deploy-svc.yaml의 이미지 소스 업데이트 (필요시)
sed -i 's|bare-io.treal.xyz:31953/semicon-anomaly:latest|your-registry/anomaly-detection-app:latest|g' k8s/deploy-svc.yaml
```

#### 3.2 Kubernetes 배포 실행

```bash
# 배포 실행
kubectl apply -f k8s/deploy-svc.yaml

# 배포 상태 확인
kubectl get all -n semicon-anomaly

# 팝 상태 확인
kubectl get pods -n semicon-anomaly

# 로그 확인
kubectl logs -f deployment/semicon-anomaly -n semicon-anomaly
```

#### 3.3 특별한 설정 옵션

```bash
# ConfigMap 설정 바꾸기 (예: GPU 사용으로 변경)
kubectl patch configmap semicon-anomaly-config -n semicon-anomaly --type=merge -p '{"data":{"DEVICE":"cuda"}}'

# 배포 다시 시작 (재시작 필요시)
kubectl rollout restart deployment/semicon-anomaly -n semicon-anomaly

# 스케일링
kubectl scale deployment semicon-anomaly -n semicon-anomaly --replicas=3
```

**장점**:
- 고가용성 및 자동 복구
- 자동 스케일링
- 러닝 업데이트 및 무중단 업데이트
- 리소스 사용량 관리

### 4. 개발 환경 선택 가이드

| 사용 사례 | 추천 방법 | 이유 |
|---|---|---|
| 초기 개발/디버깅 | 로컬 환경 (setup.sh) | 즉시 코드 변경 및 확인 가능 |
| 테스트/실험 | Docker (docker-compose) | 원활한 환경 하나로 여러 시스템에서 동일한 방식으로 테스트 가능 |
| CI/CD 파이프라인 | Docker 빌드 + 이미지 푸시 | 자동화된 빌드 및 테스트 |
| 프로덕션 운영 | Kubernetes | 고가용성, 확장성, 자동 스케일링 |

## 로컬 애플리케이션 실행

가상환경을 활성화한 후 애플리케이션을 실행하고 웹 브라우저에서 액세스하세요:

```bash
# 직접 실행
python app.py

# 또는 간편 실행 스크립트 사용
## Linux/macOS
./run_app.sh

## Windows
run_app.bat
```

애플리케이션이 실행되면 다음 주소로 접속하세요:

```
http://localhost:5000
```

## 웹 인터페이스 사용

웹 인터페이스에서 다음과 같은 작업을 수행할 수 있습니다:

1. **이상치 탐지 설정**: 좌측 설정 패널에서 전처리 옵션을 선택합니다.
   - 분석할 특성 선택
   - 이상치 비율 예상치 설정
   - MOMENT 모델 사용 옵션 선택

2. **이상치 탐지 실행**: "이상치 탐지 실행" 버튼을 클릭하여 분석을 시작합니다.

3. **결과 확인**: 우측 패널에 분석 결과와 시각화가 표시됩니다.
   - 이상치 통계 확인
   - 다양한 그래프 탭을 통해 시각화 확인
   - 성능 지표 및 모델 정보 확인

4. **그룹별 분석**: 그룹별 분석 설정을 통해 세분화된 분석을 수행할 수 있습니다.

5. **모델 성능 비교**: "모델 성능 비교" 버튼을 클릭하여 MOMENT와 IsolationForest 모델의 성능을 비교할 수 있습니다.

## 주요 기능 상세 설명

### 1. 이상치 탐지 설정

- **분석할 특성 선택**: 반도체 공정 데이터에서 분석할 특성을 선택할 수 있습니다.
- **이상치 비율 예상치 설정**: 데이터에서 예상되는 이상치 비율을 설정할 수 있습니다.
- **MOMENT 모델 사용 설정**: MOMENT 모델 또는 IsolationForest 중 선택하여 사용할 수 있습니다.

### 2. 시각화 도구

- **시계열 분석**: 시간에 따른 특성 값의 변화와 이상치를 시각화합니다.
- **분포 분석**: 특성 값의 분포와 이상치의 분포를 비교합니다.
- **상관관계 분석**: 특성 간의 상관관계를 히트맵으로 시각화합니다.
- **그룹별 분석**: 배치, 장비 등 그룹별 이상치 패턴을 분석합니다.
- **이상치 점수**: 이상치 점수의 시계열 분포를 확인할 수 있습니다.

### 3. 모델 성능 비교

- **MOMENT vs IsolationForest**: 두 모델의 성능을 직접 비교하고 최적의 모델을 선택할 수 있습니다.
- **성능 지표**: 정밀도, 재현율, F1 점수 등의 성능 지표를 제공합니다.
- **처리 시간 비교**: 각 모델의 처리 시간을 비교하여 효율성을 평가합니다.

### 4. 그룹별 분석

- **배치별 이상치**: 특정 배치에서 발생하는 이상치 패턴을 분석합니다.
- **장비별 이상치**: 특정 장비에서 발생하는 이상치 패턴을 분석합니다.
- **그룹별 이상치 비율**: 각 그룹별 이상치 비율을 계산하여 문제가 되는 그룹을 식별합니다.

## 폴더 구조

```
anomaly_detection_app/
├── app.py                    # 메인 Starlette 애플리케이션
├── data_generator.py         # 가상 반도체 공정 데이터 생성기
├── moment_detector.py        # MOMENT 모델 이상치 탐지 구현
├── requirements.txt          # 필요 패키지 목록
├── environment.yml           # conda/mamba 환경 설정 파일
├── setup.sh                  # Linux/macOS용 환경 설정 스크립트
├── setup.bat                 # Windows용 환경 설정 스크립트
├── run_app.sh                # Linux/macOS용 실행 스크립트
├── run_app.bat               # Windows용 실행 스크립트
├── Dockerfile                # Docker 이미지 빌드 파일
├── docker-compose.yml        # Docker Compose 설정 파일
├── UV_GUIDE.md               # UV 패키지 관리 가이드
├── data/                     # 데이터 파일 저장 폴더
│   └── semiconductor_process_data.csv
├── static/                   # 정적 파일 폴더
│   ├── css/
│   │   └── styles.css
│   └── js/
│       └── main.js
└── templates/                # HTML 템플릿 폴더
    └── index.html
```

## MOMENT 모델 통합 관련 참고 사항

### momentfm 패키지 설치

MOMENT 모델을 사용하기 위해 momentfm 패키지가 필요합니다:

```bash
pip install momentfm
# 또는
uv pip install momentfm
```

### MOMENT 모델 대체 처리

이 애플리케이션은 MOMENT 모델 사용에 문제가 있는 경우 자동으로 IsolationForest로 전환됩니다:

1. MOMENT 모델 초기화 실패 시 자동 대체
2. MOMENT 모델 예측 오류 발생 시 IsolationForest로 대체
3. 사용자가 UI에서 직접 모델 선택 가능

## 비동기 아키텍처의 이점

이 애플리케이션은 Starlette와 Uvicorn을 사용한 비동기 아키텍처를 채택하여 다음과 같은 이점을 제공합니다:

1. **높은 동시성**: 여러 요청을 동시에 처리하여 다수 사용자의 요청을 효율적으로 처리합니다.
2. **비차단 I/O**: 시간이 오래 걸리는 작업(예: MOMENT 모델 처리)을 비차단 방식으로 실행합니다.
3. **효율적인 자원 사용**: 적은 자원으로도 높은 처리량을 제공합니다.
4. **확장성**: 시스템 변경 없이 대규모 데이터 처리와 다중 사용자 환경으로 확장할 수 있습니다.

## 이상치 유형

이 애플리케이션에서 탐지할 수 있는 이상치 유형:

1. **포인트 이상(Point Anomalies)**: 개별 데이터 포인트의 이상
2. **컨텍스트 이상(Contextual Anomalies)**: 특정 컨텍스트에서만 이상으로 간주되는 패턴
3. **집단 이상(Collective Anomalies)**: 개별 데이터 포인트는 정상이지만 집단으로 볼 때 이상인 패턴

## 성능 평가

이상치 탐지 성능은 다음과 같은 지표로 평가됩니다:

- **정밀도(Precision)**: 이상치로 탐지된 것 중 실제 이상치의 비율
- **재현율(Recall)**: 실제 이상치 중 이상치로 탐지된 비율
- **F1 점수**: 정밀도와 재현율의 조화 평균
- **처리 시간**: 이상치 탐지에 소요된 시간

## 라이센스

MIT 라이센스

## 주의사항

MOMENT 모델은 계산 집약적이므로, 고성능 하드웨어(가급적 GPU)에서 실행하는 것이 권장됩니다. GPU가 없는 시스템에서는 자동으로 CPU 모드로 실행되지만 처리 속도가 느려질 수 있습니다.
